////////////////////////////////////////////////////////
//    Laplacian Mesh Deformation Mel Script           //
//          Written by Declan Russell                 //
//    Used for giving a basic UI for the deformation  //
//    plugin and initialized our plugin attributes    //
////////////////////////////////////////////////////////


// Some global variables to be used later in our program
global int $currentSetNum = 0;
global string $selectedMesh;
global int $deformInit = false;
global string $setsList[];
global int $numSets=0;
global int $association[];
global string $deformedShapeNodeName;
global string $deformerNodeName;
global string $handleLocator[];
global string $shapeNodeName;
global string $parentNodeName;

//get our shape node
proc string getShapeNodeFromSelection()
{
	// find the shape
	string $ShapeSelection[]= `ls -dag -sl -g`;
	int $numSelection = size($ShapeSelection);
	if($numSelection == 0)
			error "no valid selection made, try again";

	string $OrigShapeNodeName = $ShapeSelection[0];
	return $OrigShapeNodeName;
}

//get our deformer node
proc string findDeformerNode(string $deformedShapeNodeName)
{
	// find the deformer
	string $deformerSelection[]= `listConnections -s on ($deformedShapeNodeName + ".inMesh")`;
	$numSelection = size($deformerSelection);
	if($numSelection == 0)
			error "no valid selection made, try again";
	if("LaplacianMeshDeformer"!=`nodeType $deformerSelection[0]`)
			error "no valid deformer selected, try again";
	return $deformerSelection[0];
}
//get the parent of an item
proc string getParent(string $shapeNodeName)
{
	string $parentList[] = `listRelatives -parent $shapeNodeName`;
	return $parentList[0];
}

// Set our geomtry and add our deformer node to it
proc setDeformGeom(){
    global string $selectedMesh;
    global int $deformInit;
    global int $association[];
    global string $deformedShapeNodeName;
    global string $deformerNodeName;
    // get our selected geometry
    string $selected[] = `ls -sl`;
    //Make sure we have something in our array
    int $arraySize = size($selected);
    if($arraySize>0){
        // we can only do one model at the moment so we will just pick te firstmodel selected
        $selectedMesh = $selected[0];
        // create our deformation node
        global int $numSets;
        global string $deformedShapeNodeName;
        global string $deformerNodeName;
        global int $association[];
        global string $setsList[];
        global vector $handleCentre[];
        global string $handleLocator[];
        global string $shapeNodeName;
        $shapeNodeName = getShapeNodeFromSelection();
        global string $parentNodeName;
        $parentNodeName = getParent($shapeNodeName);
        
        //init our global variables to 0;
        $numSets = 0;
        clear($association);
        clear($setsList);
        clear($handleCentre);
        clear($handleLocator);
        
        deformer -type LaplacianMeshDeformer;
        $deformedShapeNodeName = getShapeNodeFromSelection();
        $deformerNodeName = findDeformerNode($deformedShapeNodeName);
        setAttr ($deformerNodeName + ".numSets") $numSets;
        //create our association matrix and set the deformer node attribute
        updateAssociation();
        //create our local coordinates and set the deformer node attribute
        setLocalCoords();
        //manually call our deform function to recompute everything
        setAttr ($deformerNodeName + ".recompute") true;
        
        $deformInit = true;
    }
    else{
        error "ERROR: You must first select something to deform!"; 
    }
}

proc setLocalCoords(){
    // set the local coordinates for each vertices related to their locators
    vector $localPos;
    string $localPosString = "";
    global int $association[];
    global string $handleLocator[];
    global string $selectedMesh;
    global string $shapeNodeName;
    global string $deformerNodeName;
        //get our total num of vertex's
    int $numVerticesA[] = `polyEvaluate -vertex $selectedMesh`;
    int $numVertices = $numVerticesA[0];
    vector $handlePos;
    for($i=0;$i<$numVertices;$i++)
    {
    	$localPos = `xform -q -t -objectSpace ($shapeNodeName + ".vtx["+$i+"]")`;
    	if($association[$i]!= -1)
    	{
    	    $handlePos = `xform -q -t -objectSpace $handleLocator[$association[$i]]`;
    		$localPos = $localPos - $handlePos;
    	}
    	$localPosString += " " + ($localPos.x) + " " + ($localPos.y) +" " + ($localPos.z) + " 1 ";
    }
    $localPosString = "setAttr ($deformerNodeName + \".localCoordinate\") -type pointArray "+ $numVertices + $localPosString;
    eval $localPosString;
}

// function to add sets
proc selectVerts(){
    print("button pressed\n");
    //start up paint select
    global string $selectedMesh;
    global int $deformInit;
    if($deformInit==true){
        doMenuComponentSelection($selectedMesh,"vertex");
        changeSelectMode -vertex;
        artSelectToolScript 4;
        selectMode -component;
    }
    else{
        error "ERROR: You must first set your geometry!";
    }    
}

proc updateAssociation(){
    global string $selectedMesh;
    global int $association[];
    global string $deformedShapeNodeName;
    global string $deformerNodeName;
    global string $setsList[];
    global int $numSets;
    //get our total num of vertex's
    int $numVerticesA[] = `polyEvaluate -vertex $selectedMesh`;
    int $numVertices = $numVerticesA[0];
    //clear our association array ready for our update
    clear($association);
    print($numVertices + "\n");
    
    //Set our associations to be used in out plug in
    //-1 means no associaion
    string $assoValueString = "";
    for($i=0;$i<$numVertices;$i++)
    {
	    $association[$i]=-1;
	    for($j=0;$j<$numSets;$j++)
	    {
		    if(`sets -isMember $setsList[$j] ($deformedShapeNodeName + ".vtx[" + $i + "]")`)
		    {
			    $association[$i] = $j;
			    break;
		    }
	    }
	    $assoValueString += (" " + $association[$i]);
    }
    
    // set associate attribute in our deformation node
    $assoValueString = "setAttr ($deformerNodeName + \".association\") -type Int32Array "+$numVertices+$assoValueString;
    eval $assoValueString;
}

proc addLocator(){
    global string $deformerNodeName;
    global string $deformedShapeNodeName;
    global int $numSets;
    global int $association[];
    global string $selectedMesh;
    global string $parentNodeName;
    //get our total num of vertex's
    int $numVerticesA[] = `polyEvaluate -vertex $selectedMesh`;
    int $numVertices = $numVerticesA[0];
    // create Handle for each set, find the handle positions
    vector $handleCentre;
    vector $tmpPos;
    global string $handleLocator[];
    string $handleTmp[];

    //get the postion to add the locator
    int $i = size($handleLocator);
	$handleCentre = <<0.0, 0.0, 0.0>>;
	int $numVerticesInSet = 0;
	for($j=0;$j<$numVertices;$j++)
	{
		if($association[$j] == $i)
		{
			$tmpPos = `xform -q -t -objectSpace ($deformedShapeNodeName + ".vtx["+$j+"]")`;
			$handleCentre+=$tmpPos;
			$numVerticesInSet++;
		}
	}
	$handleCentre/=$numVerticesInSet;
	
	print($handleCentre);
    // create locators at the middle of each sets, link locator's world matrix to deformer
    // add a locator in the center of our set and connect its tranform attribute to our deformer handleMatrix
	$tmpPos = $handleCentre;
	$handleTmp = `spaceLocator`;
	move ($tmpPos.x) ($tmpPos.y) ($tmpPos.z);
	performFreezeTransformations(0);
	parent -relative $handleTmp $parentNodeName;
	$handleLocator[$i] = $handleTmp[0];
	//update the local coodinates of our mesh to take into count our handles
	setLocalCoords();
	connectAttr ($handleLocator[$i] + ".matrix") ($deformerNodeName + ".handleMatrix[" + $i + "]");

}

proc addHandle(){
    global int $deformInit;
    global string $deformerNodeName;
    if($deformInit){
        // get our selected vertex's
        string $selected[] = `ls -sl`;
        //make sure that we have selected something
        if(size($selected)>0){
            global int $currentSetNum;
            string $setName = "s" + $currentSetNum;
            //increment our set id
            $currentSetNum++;
            string $newSet = `sets -name $setName`;
            //append our set to our setlist
            global string $setsList[];
            global int $numSets;
            $setsList[size($setsList)] = $newSet;
            $numSets = size($setsList);
            
            updateAssociation();
            addLocator();
            setAttr ($deformerNodeName + ".numSets") $numSets;
            setAttr ($deformerNodeName + ".handlesAdded") true;
            //manually call our deform function to recompute everything
            setAttr ($deformerNodeName + ".recompute") true;
        }
        else{
            error "ERROR: You have not selected anything!";
        }
    }
    else{
        error "ERROR: You must first set your geomtry!";
    }         
}

// Create our menu
window -title "Laplacian Mesh Deformer" -width 500 -height 500 -sizeable false;
    //create set our layout
    columnLayout;
        print("current set " + $currentSetNum);
        //Now lets add our buttons
        button -label "Set Geomtry" -width 500 -command "setDeformGeom";
        button -label "Paint Vertex Tool" -width 500 -command "selectVerts";
        button -label "Add Handle" -width 500 -command "addHandle";
        
showWindow;